require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe DishesController do

  def mock_dish(stubs={})
    @mock_dish ||= mock_model(Dish, stubs).as_null_object
  end

  describe "GET index" do
    it "assigns all dishes as @dishes" do
      Dish.stub(:all) { [mock_dish] }
      get :index
      assigns(:dishes).should eq([mock_dish])
    end
  end

  describe "GET show" do
    it "assigns the requested dish as @dish" do
      Dish.stub(:find).with("37") { mock_dish }
      get :show, :id => "37"
      assigns(:dish).should be(mock_dish)
    end
  end

  describe "GET new" do
    it "assigns a new dish as @dish" do
      Dish.stub(:new) { mock_dish }
      get :new
      assigns(:dish).should be(mock_dish)
    end
  end

  describe "GET edit" do
    it "assigns the requested dish as @dish" do
      Dish.stub(:find).with("37") { mock_dish }
      get :edit, :id => "37"
      assigns(:dish).should be(mock_dish)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "assigns a newly created dish as @dish" do
        Dish.stub(:new).with({'these' => 'params'}) { mock_dish(:save => true) }
        post :create, :dish => {'these' => 'params'}
        assigns(:dish).should be(mock_dish)
      end

      it "redirects to the created dish" do
        Dish.stub(:new) { mock_dish(:save => true) }
        post :create, :dish => {}
        response.should redirect_to(dish_url(mock_dish))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved dish as @dish" do
        Dish.stub(:new).with({'these' => 'params'}) { mock_dish(:save => false) }
        post :create, :dish => {'these' => 'params'}
        assigns(:dish).should be(mock_dish)
      end

      it "re-renders the 'new' template" do
        Dish.stub(:new) { mock_dish(:save => false) }
        post :create, :dish => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested dish" do
        Dish.stub(:find).with("37") { mock_dish }
        mock_dish.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => "37", :dish => {'these' => 'params'}
      end

      it "assigns the requested dish as @dish" do
        Dish.stub(:find) { mock_dish(:update_attributes => true) }
        put :update, :id => "1"
        assigns(:dish).should be(mock_dish)
      end

      it "redirects to the dish" do
        Dish.stub(:find) { mock_dish(:update_attributes => true) }
        put :update, :id => "1"
        response.should redirect_to(dish_url(mock_dish))
      end
    end

    describe "with invalid params" do
      it "assigns the dish as @dish" do
        Dish.stub(:find) { mock_dish(:update_attributes => false) }
        put :update, :id => "1"
        assigns(:dish).should be(mock_dish)
      end

      it "re-renders the 'edit' template" do
        Dish.stub(:find) { mock_dish(:update_attributes => false) }
        put :update, :id => "1"
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested dish" do
      Dish.stub(:find).with("37") { mock_dish }
      mock_dish.should_receive(:destroy)
      delete :destroy, :id => "37"
    end

    it "redirects to the dishes list" do
      Dish.stub(:find) { mock_dish }
      delete :destroy, :id => "1"
      response.should redirect_to(dishes_url)
    end
  end

end

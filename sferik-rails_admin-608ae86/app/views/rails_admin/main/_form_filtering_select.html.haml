:ruby
  config = field.associated_model_config
  related_id = params[:associations] && params[:associations][field.name.to_s]
  
  
  xhr = field.associated_collection_count > 100
  
  if @object.new_record? && related_id.present? && related_id != 'new'
    selected = field.associated_model_config.abstract_model.get(related_id)
    selected_id = selected.id
    selected_name = selected.send(config.object_label_method)
  else
    selected_id = field.selected_id
    selected_name = field.formatted_value
  end
  
  if xhr
    collection = [[selected_name, selected_id]]
  else
    collection = field.associated_collection(@authorization_adapter)
  end

= field_wrapper_for(form, field) do
  = form.select field.method_name, collection, { :selected => selected_id, :include_blank => true }, field.html_attributes
  - if authorized? :new, config.abstract_model
    - path_hash = { :model_name => config.abstract_model.to_param }
    - path_hash.merge!({ :associations => { field.inverse_of => (@object.id || 'new') } }) if field.inverse_of
    = link_to t('admin.actions.create').capitalize + ' ' + config.abstract_model.pretty_name.downcase, rails_admin_new_path(path_hash), :class => "createAssociatedRecord"
- head_style 'rails_admin/ra.filtering-select.css'
- head_javascript "rails_admin/ra.filtering-select.js"
- head_javascript do
  $j(document).ready(function($){
  $("##{"#{field.dom_id}"}").filteringSelect({
  - if xhr
    createQuery: function(query) {
    return { query: query }
    },
    source: "#{rails_admin_list_path(config.abstract_model.to_param, :compact => true)}"
  });
  if($("div.createAssociatedRecordDialog").length == 0)Â {
  $(".#{"#{field.dom_id}"} .createAssociatedRecord").remoteForm({ dialogClass: "createAssociatedRecordDialog" });
  } else { // hide link if we already are inside a dialog (endless issues on nested dialogs with JS)
  $(".#{"#{field.dom_id}"} .createAssociatedRecord").hide();
  }
  });
